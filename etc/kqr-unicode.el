;; Replace keywords with Unicode symbols
(global-prettify-symbols-mode +1)
(setq prettify-symbols-unprettify-at-point 'right-edge)
(defun prettify-programming-symbols ()
  "Prettify programming symbols!"
  (interactive)
  (let ((local-symbols
         (pcase major-mode
           ('fsharp-mode '((">>" . ?¬ª)))
           ('csharp-mode '(("=>" . ?‚§á)
                           ("foreach" . ?‚àÄ)))
           (_ ())))
        (global-symbols
         '(;; Common operators
           ("==" . (?Ôºù (Bc . Bl) ?Ôºù))  ;; ==
           ("!=" . (?Ôºù (Bc . Bc) ?/))  ;; =/=
           (">=" . ?‚â•)
           ("<=" . ?‚â§)
           ("->" . ?‚üº)
           ("<-" . ?‚üµ)
           ("|>" . ?‚ñ∑)
           ("<|" . ?‚óÅ)
           ("||" . ?‚à®)
           ("&&" . ?‚àß)
           ("!" . ?¬¨)

           ;; Common types
           ;; Some of these are known under multiple names, but care should be
           ;; taken to only prettify ONE of them per mode, or things get
           ;; confusing. The choice here is strongly influenced by my current
           ;; day job in .NET, mainly C#.
           ("void" . ?‚àÖ)
           ("bool" . ?ùîπ)  ;; aka boolean, Bool, Boolean ‚Äì but pick just one
           ("unsigned" . ?‚Ñï)
           ("int" . ?‚Ñ§)
           ("float" . ?‚Ñù)
           ("double" . (?‚Ñù (Br . Bc) ?‚Ñù))  ;; RR
           ("char" . ?Œ£)
           ("string" . (?Œ£ (tr . cl) ?*))  ;; Œ£*

           ;; Greek
           ("alpha" . ?Œ±)
           ("beta" . ?Œ≤)
           ("gamma" . ?Œ≥)
           ("Gamma" . ?Œì)
           ("delta" . ?Œ¥)
           ("Delta" . ?Œî)
           ("lambda" . ?Œª)
           ("sigma" . ?œÉ)
           ("Sigma" . ?Œ£)
           ("pi" . ?œÄ)
           ("tau" . ?œÑ)
           ("psi" . ?œà)
           ("Psi" . ?Œ®)
           ("Phi" . ?Œ¶))))
    (mapc (lambda (pair) (push pair prettify-symbols-alist))
          (append local-symbols global-symbols))))
(add-hook 'prog-mode-hook 'prettify-programming-symbols)
(add-hook 'ess-mode-hook 'prettify-programming-symbols)

;; Allow convenient hotkeys for special characters I use often
(with-eval-after-load 'iso-transl
  (defvar iso-transl-greek-map (make-sparse-keymap))
  (mapc (lambda (mapping)
          (define-key iso-transl-greek-map (kbd (car mapping)) (cdr mapping)))
        '(("a" . "Œ±")
          ("b" . "Œ≤")
          ("c" . "œá")
          ("D" . "Œî")
          ("d" . "Œ¥")
          ("e" . "Œµ")
          ("F" . "Œ¶")
          ("f" . "œÜ")
          ("G" . "Œì")
          ("g" . "Œ≥")
          ("H" . "Œò")
          ("h" . "Œ∏")
          ("k" . "Œ∫")
          ("L" . "Œõ")
          ("l" . "Œª")
          ("m" . "Œº")
          ("p" . "œÄ")
          ("r" . "œÅ")
          ("S" . "Œ£")
          ("s" . "œÉ")
          ("t" . "œÑ")
          ("W" . "Œ©")
          ("w" . "œâ")
          ("x" . "Œæ")))
  (define-key global-map (kbd "C-x g") iso-transl-greek-map)

  (define-key global-map (kbd "C-x m") nil)
  (defvar iso-transl-math-map (make-sparse-keymap))
  (mapc (lambda (mapping)
          (define-key iso-transl-math-map (kbd (car mapping)) (cdr mapping)))
        '(("2" . "¬≤")
          ("3" . "¬≥")
          ("g" . "‚â•")
          ("l" . "‚â§")
          ("p" . "¬±")
          ("q" . "‚àö")
          ("d" . "‚àÇ")
          ("x" . "√ó")
          ("i" . "‚à´")))
  (define-key global-map (kbd "C-x m") iso-transl-math-map)

  (mapc (lambda (mapping)
          (define-key iso-transl-ctl-x-8-map (kbd (car mapping)) (cdr mapping)))
        '((" " . "\ufeff")
          ("." . "‚Ä¶")
          ("m" . "¬∑")
          ("s" . "¬ß")
          ("p" . "¬∂"))))
